---
title: "Assignment 3"
subtitle: "Due at 11:59pm on October 24."
format: html
editor: visual
---

helpful links: selectorgadget.com, regex expression using

You may work in pairs or individually for this assignment. Make sure you join a group in Canvas if you are working in pairs. Turn in this assignment as an HTML or PDF file to ELMS. Make sure to include the R Markdown or Quarto file that was used to generate it. Include the GitHub link for the repository containing these files.

```{r include=FALSE}
library(xml2)
library(rvest)
library(tidyverse)
library(tidytext)

```

## Github link: https://github.com/ZuorW/SURV727.git

## Web Scraping

In this assignment, your task is to scrape some information from Wikipedia. We start with the following page about Grand Boulevard, a Chicago Community Area.

<https://en.wikipedia.org/wiki/Grand_Boulevard,_Chicago>

The ultimate goal is to gather the table "Historical population" and convert it to a `data.frame`.

As a first step, read in the html page as an R object. Extract the tables from this object (using the `rvest` package) and save the result as a new object. Follow the instructions if there is an error. Use `str()` on this new object \-- it should be a list. Try to find the position of the "Historical population" in this list since we need it in the next step.

```{r}
# Read in Wikipedia webpage as an R object
url <- "https://en.wikipedia.org/wiki/Grand_Boulevard,_Chicago"
webpage <- read_html(url)

# Extract tables from the webpage as data frames
tables <- html_table(webpage)

str(tables)
tables
```

Extract the "Historical population" table from the list and save it as another object. You can use subsetting via `[[â€¦]]` to extract pieces from a list. Print the result.

```{r}
# Extract second table only and name as pop
pop <- tables[[2]]
pop
```

You will see that the table needs some additional formatting. We only want rows and columns with actual values (I called the table object `pop`).

```{r}
# Remove first row and third empty column to clean pop
pop <- pop[,-3]
pop <- pop[-11,]
pop
```

## Expanding to More Pages

That's it for this page. However, we may want to repeat this process for other community areas. The Wikipedia page https://en.wikipedia.org/wiki/Grand_Boulevard,\_Chicago has a section on "Places adjacent to Grand Boulevard, Chicago" at the bottom. Can you find the corresponding table in the list of tables that you created earlier? Extract this table as a new object.

```{r}
# Extract fourth table and name as pop2
pop2 <- tables[[4]]
pop2
```

Then, grab the community areas east of Grand Boulevard and save them as a character vector. Print the result

```{r}
# Take community names column 3 and save as a character vector
east <- as.character(pop2$X3)
east <- east[-2] #remove blank vectors
east <- east[-3]
east
```

We want to use this list to create a loop that extracts the population tables from the Wikipedia pages of these places. To make this work and build valid urls, we need to replace empty spaces in the character vector with underscores. This can be done with `gsub()`, or by hand. The resulting vector should look like this: "Oakland,\_Chicago" "Kenwood,\_Chicago" "Hyde_Park,\_Chicago"

```{r}
# Clean up communities variable
east <- gsub(" ", "_", east) #change space to underscore
east
```

To prepare the loop, we also want to copy our `pop` table and rename it as `pops`. In the loop, we append this table by adding columns from the other community areas.

```{r}
pops <- pop
```

Build a small loop to test whether you can build valid urls using the vector of places and pasting each element of it after `https://en.wikipedia.org/wiki/` in a for loop. Calling `url` shows the last url of this loop, which should be `https://en.wikipedia.org/wiki/Hyde_Park,_Chicago`.

```{r}
for(i in east) {
  url <- paste0("https://en.wikipedia.org/wiki/", i, sep = "")
  src <- read_html(url)
  print(url)
}

url
```

Finally, extend the loop and add the code that is needed to grab the population tables from each page. Add columns to the original table `pops` using `cbind()`.

```{r}
pops$Location <- c("Grand Boulevard, Chicago")


for(i in east) {
  url <- paste0("https://en.wikipedia.org/wiki/", i, sep = "")
  src <- read_html(url)
  print(url)

  nds <- html_nodes(src, xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "us-census-pop-right", " " ))]//th | //*[contains(concat( " ", @class, " " ), concat( " ", "us-census-pop-right", " " ))]//td')
  stats <- html_text(nds)
  stats <- stats[-45]
  
  header <- stats[1:4]
  stats <- stats[-(1:4)]
  
  stats_matrix <- matrix(stats, ncol = 4, byrow = TRUE)
  stats_df <- as.data.frame(stats_matrix)
  stats_df <- stats_df[-3]
  colnames(stats_df) <- header[-3]

  stats_df$Location <- gsub("_", " ", i)
  
  pops <- cbind(pops, stats_df)
}

pops
```
```{r}
for(i in east) {
  url <- paste0("https://en.wikipedia.org/wiki/", i, sep = "")
  src <- read_html(url)
  print(url)

  nds <- html_nodes(src, xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "us-census-pop-right", " " ))]//th | //*[contains(concat( " ", @class, " " ), concat( " ", "us-census-pop-right", " " ))]//td')
  stats <- html_text(nds)
  stats <- stats[-45]
  
  header <- stats[1:4]
  stats <- stats[-(1:4)]
  
  stats_matrix <- matrix(stats, ncol = 4, byrow = TRUE)
  stats_df <- as.data.frame(stats_matrix)
  stats_df <- stats_df[-3]
  colnames(stats_df) <- header[-3]
  
  stats_df$Location <- gsub("_", " ", i)
  
  pops <- cbind(pops, stats_df)
}

pops
```


## Scraping and Analyzing Text Data

Suppose we wanted to take the actual text from the Wikipedia pages instead of just the information in the table. Our goal in this section is to extract the text from the body of the pages, then do some basic text cleaning and analysis.

First, scrape just the text without any of the information in the margins or headers. For example, for "Grand Boulevard", the text should start with, "**Grand Boulevard** on the [South Side](https://en.wikipedia.org/wiki/South_Side,_Chicago "South Side, Chicago") of [Chicago](https://en.wikipedia.org/wiki/Chicago "Chicago"), [Illinois](https://en.wikipedia.org/wiki/Illinois "Illinois"), is one of the ...". Make sure all of the text is in one block by using something like the code below (I called my object `description`).

```{r}
# Grab body text of Wiki page and save in one block
description <- webpage %>% 
  html_nodes('.mw-parser-output p') %>% 
  html_text(trim = TRUE) %>% 
  paste(collapse = ' ') %>% 
  as_tibble()

grand_descrip <- data.frame(Location = "Grand Boulevard, Chicago", Description = description)

```

Using a similar loop as in the last section, grab the descriptions of the various communities areas. Make a tibble with two columns: the name of the location and the text describing the location.

```{r}
# Add Community column to tibble of Grand Boulevard description
multi_desc <- description %>% 
  add_column(Community = "Grand Boulevard, Chicago", .before = "value") %>% 
  rename(Description = value)

# Loop
for(i in east) {
  url <- paste0("https://en.wikipedia.org/wiki/", i)
  src <- read_html(url)
  
  description <- src %>% 
    html_nodes('.mw-parser-output p') %>% 
    html_text() %>% 
    paste(collapse = ' ')

  community <- gsub("_", " ", i)
  
  multi_desc <- rbind(multi_desc, tibble(Community = community, Description = description))
}

multi_desc
```

Let's clean the data using `tidytext`. If you have trouble with this section, see the example shown in <https://www.tidytextmining.com/tidytext.html>

```{r}
library(tidytext)
```

Create tokens using `unnest_tokens`. Make sure the data is in one-token-per-row format. Remove any stop words within the data. What are the most common words used overall?

```{r}
# tidytext data on stop words
data(stop_words)

# Tokenize data and remove stop words
tokenized_desc <- multi_desc %>%
  unnest_tokens(word, Description) %>%
  anti_join(stop_words) #remove stop words

# Make list of common words
common_words <- tokenized_desc %>%
  count(word, sort = TRUE)

common_words
```

-   The top three common words used are: "park", "hyde", and "chicago".

Plot the most common words within each location. What are some of the similarities between the locations? What are some of the differences?

```{r}
# Calculate word counts by community
word_counts <- tokenized_desc %>%
  group_by(Community, word) %>%
  summarise(n = n(), .groups = "drop") %>%
  mutate(word = reorder(word, n))

# plot the top N most common words per location
N <- 12

word_counts %>%
  group_by(Community) %>%
  top_n(N, n) %>%
  ggplot(aes(x = word, y = n, fill = Community)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ Community, scales = "free_y") +
  coord_flip() +
  labs(x = "Most common words", y = "Frequency")
```

-   Similarities: The words with the highest use frequency in each community are all (or part) of that community's name. After that, "Chicago" is the next most used word in each page except for the Kenwood community. All communities share common words related to neighborhoods, infrastructure, and politics.

-   Differences: Hyde Park has the highest mean frequencies of common words compared to other communities. The word "university" has been common used in the Hyde Park area, and this may be explained by the location of University of Chicago (residing inside this area). Additionally, Grand Boulevard and Hyde Park both have a word starting with a number in the list of common words. All communities except Kenwood have words related to demographics, such as "age" and "African".
